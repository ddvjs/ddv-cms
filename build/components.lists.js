'use strict'
const fs = require('fs')
const util = require('./util.js')
const version = require('../package.json').version

function watchComponentsPath (path, fn) {
  var old = null
  var runTimer = null
  fs.watch(path, function (event, name) {
    clearRunTimer()
    runTimer = setTimeout(function () {
      clearRunTimer()
      componentsCreate()
    }, 100)
  })
  function componentsCreate () {
    getPackagesListsByPath(path)
    .then(function (names) {
      var check, error
      if (names && util.isArray(names)) {
        check = names.join('')
        if (check !== old) {
          old = check
          return getComponentsListsByNames(names)
        }
      }
      error = new Error('no chanage')
      error.errorId = 'NO_CHANAGE'
      return Promise.reject(error)
    })
    .then(function (res) {
      fn && util.isFunction(fn) && fn(res)
    })
    .catch(function (e) {
      if (e.errorId === 'NO_CHANAGE') {

      }
      // 忽略异常
    })
  }
  // 清理定时器
  function clearRunTimer () {
    if (runTimer) {
      clearTimeout(runTimer)
      runTimer = null
    }
  }
}
// 获取
function getComponentsListsByPath (path) {
  return getPackagesListsByPath(path)
  .then(function (names) {
    return getComponentsListsByNames(names)
  })
}
function getComponentsListsByNames (names) {
  return Promise.resolve(names)
  .then(function filter (names) {
    var errorNames = []
    var components = []
    names = (names && Array.isArray(names) && names.length > 0) ? names : []
    names.forEach && names.forEach(function (name) {
      var nameSource, namePointIndex
      if (!(name && util.isString(name))) {
        return
      }
      // 排除一点开头的
      if (name.substr(0, 1) === '.') {
        errorNames.push(name)
        return
      }
      nameSource = name
      namePointIndex = name.indexOf('.')
      if (namePointIndex > -1) {
        if (name.split('.') > 2) {
          errorNames.push(nameSource)
          return
        } else {
          name = name.substr(0, namePointIndex)
        }
      }
      if (util.isNumber(name)) {
        errorNames.push(nameSource)
        return
      }
      components.push([name, util.middlelineToUpperCase(name), nameSource])
      nameSource = namePointIndex = void 0
    })
    return {components, errorNames}
  })
  .then(function toLists ({components, errorNames}) {
    var entryComponents = Object.create(null)
    var importComponents = '\'use strict\''
    var importComponentsExportArray = []
    importComponentsExportArray.push('  version')
    importComponents += '\n// This file is automatically generated and does not need to be modified'
    importComponents += '\n// 本文件自动生成，不需要修改'
    if (components.forEach && components.length > 0) {
      components.forEach && components.forEach(function ([name, nameUpperCase, nameSource]) {
        importComponents += '\nimport ' + nameUpperCase + ' from \'../components/' + nameSource + '\''
        importComponentsExportArray.push('  ' + nameUpperCase)
        entryComponents[name] = './components/' + nameSource
      })
    }
    importComponents += '\nconst version = \'' + version + '\'\n\nexport {\n' + importComponentsExportArray.join(',\n') + '\n}\n'
    return {importComponents, entryComponents, errorNames}
  })
}
// 通过地址获取packages列表
function getPackagesListsByPath (packagesPath) {
  return new Promise(function (resolve, reject) {
    var names
    fs.readdir(packagesPath, function (err, files) {
      if (err) {
        reject(err)
        return false
      }
      names = []
      files.forEach(function (name) {
        // 排除空或者不是字符串
        if (!(name && util.isString(name) && name.substr)) {
          return
        }
        // 插入数组
        names.push(name)
      })

      resolve(names)
    })
  })
}

module.exports = {
  watchComponentsPath,
  getComponentsListsByPath,
  getComponentsListsByNames,
  getPackagesListsByPath
}
